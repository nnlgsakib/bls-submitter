
 

import React, { useState, useEffect } from "react";
import { ethers } from "ethers";
import "./App.css";
import Token from "./erc20.json";


function App() {
  const [provider, setProvider] = useState(null);
  const [wallet, setWallet] = useState(null);
  const [balance, setBalance] = useState(null);
  const [address, setAddress] = useState("");
  const [transactionStatus, setTransactionStatus] = useState(null);
  const [transactionHash, setTransactionHash] = useState(null);
  const [amount, setAmount] = useState("");
  const [recipientAddress, setRecipientAddress] = useState("");
  const [tokenContract, setTokenContract] = useState(null);
  const [tokenBalance, setTokenBalance] = useState(null);

  useEffect(() => {
    const connectProvider = async () => {
      try {
        const provider = new ethers.providers.JsonRpcProvider("https://rpc-msc.mindchain.info/");
        setProvider(provider);
        if (localStorage.getItem("privateKey")) {
          const wallet = new ethers.Wallet(localStorage.getItem("privateKey"), provider);
          setWallet(wallet);
          setAddress(wallet.address);
          const token = new ethers.Contract(
            process.env.REACT_APP_TOKEN_ADDRESS,
            Token.abi,
            wallet
          );
          setTokenContract(token);
        }
      } catch (error) {
        console.log(error);
      }
    };
    connectProvider();
  }, []);

  const generateWallet = () => {
    const wallet = ethers.Wallet.createRandom();
    localStorage.setItem("privateKey", wallet.privateKey);
    setWallet(wallet);
    setAddress(wallet.address);
    setBalance(0);
    const token = new ethers.Contract(
      process.env.REACT_APP_TOKEN_ADDRESS,
      Token.abi,
      wallet
    );
    setTokenContract(token);
  };

  const importWallet = () => {
    const input = prompt("Enter your private key");
    if (input === null) {
      return;
    }
    try {
      const wallet = new ethers.Wallet(input.trim(), provider);
      localStorage.setItem("privateKey", wallet.privateKey);
      setWallet(wallet);
      setAddress(wallet.address);
      setBalance(0);
      const token = new ethers.Contract(
        process.env.REACT_APP_TOKEN_ADDRESS,
        Token.abi,
        wallet
      );
      setTokenContract(token);
    } catch (error) {
      console.log(error);
      alert("Invalid private key");
    }
  };

  const exportWallet = () => {
    const wallet = new ethers.Wallet(localStorage.getItem("privateKey"));
    alert(`Your private key is: ${wallet.privateKey}`);
  };

  const updateBalance = async () => {
    if (wallet) {
      const balance = await wallet.getBalance();
      setBalance(ethers.utils.formatEther(balance));
      localStorage.setItem("balance", balance.toString());
      if (tokenContract) {
        const tokenBalance = await tokenContract.balanceOf(wallet.address);
        setTokenBalance(tokenBalance.toString());
      }
    }
  };

  const handleSend = async () => {
    try {
      setTransactionStatus("Pending");
      const tx = await tokenContract.transfer(
        recipientAddress,
        ethers.utils.parseEther(amount)
      );
      setTransactionHash(tx.hash);
      await tx.wait();
      setTransactionStatus("Success");
      updateBalance();
      setAddress(""); 
    } catch (error) {
      console.log(error);
      setTransactionStatus("Failed");
    }
  };
  
  const logout = () => {
    localStorage.removeItem("privateKey");
    localStorage.removeItem("balance");
    setWallet(null);
    setBalance(null);
    setAddress("");
  };

 


     
  return (
    <div className="App">
      <header className="App-header">
        <h1>Token Transfer</h1>
        {wallet ? (
          <>
            <p>Address: {address}</p>
            <p>Balance: {balance} ETH</p>
            {tokenContract && <p>Token Balance: {tokenBalance} TKN</p>}
            <button onClick={updateBalance}>Refresh Balance</button>
            <button onClick={exportWallet}>Export Private Key</button>
            <button onClick={logout}>Logout</button>
            <br />
            <input
              type="text"
              placeholder="Recipient Address"
              value={recipientAddress}
              onChange={(e) => setRecipientAddress(e.target.value)}
            />
            <input
              type="number"
              placeholder="Amount"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
            />
            <button onClick={handleSend}>Send Tokens</button>
            {transactionStatus === "Pending" && (
              <p>Transaction pending with hash: {transactionHash}</p>
            )}
            {transactionStatus === "Success" && (
              <p>Transaction successful with hash: {transactionHash}</p>
            )}
            {transactionStatus === "Failed" && (
              <p>Transaction failed with hash: {transactionHash}</p>
            )}
          </>
        ) : (
          <>
            <button onClick={generateWallet}>Generate Wallet</button>
            <button onClick={importWallet}>Import Wallet</button>
          </>
        )}
      </header>
    </div>
  );
        }
        export default App;
